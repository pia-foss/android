buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'

repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.5'

    implementation project(':openvpnTunnel')
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'com.madgag.spongycastle:core:1.54.0.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.2.0-alpha03'
    implementation "androidx.core:core-ktx:1.3.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // PIA
    implementation project(":core")
    implementation project(":regions")
    implementation project(":account")
    implementation project(":csi")

    // Commons
    implementation "io.ktor:ktor-client-okhttp:1.4.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.0-RC"

    // Tests
    testImplementation 'com.github.gmazzo:okhttp-mock:1.3.2'
    testImplementation "org.json:json:20180813"
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'org.robolectric:robolectric:4.0.2'
    testImplementation 'org.mockito:mockito-inline:2.23.0'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    androidTestImplementation 'com.github.gmazzo:okhttp-mock:1.3.2'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:core:1.2.0'

    // EventBus
    implementation 'org.greenrobot:eventbus:3.1.1'

    //ButterKnife
    implementation 'com.jakewharton:butterknife:10.2.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'

    //Wireguard
    implementation "com.jakewharton.threetenabp:threetenabp:1.2.1"
    implementation "net.i2p.crypto:eddsa:0.3.0"
    implementation "androidx.databinding:databinding-runtime:3.5.3"

    //google
    implementation 'com.android.billingclient:billing:1.0'
    // https://github.com/jrummyapps/colorpicker
    implementation 'com.jrummyapps:colorpicker:2.1.6'
    //https://github.com/PhilJay/MPAndroidChart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'

    //https://github.com/apl-devs/AppIntro
    implementation 'com.github.paolorotolo:appintro:4.1.0'
    //https://github.com/chrisjenx/Calligraphy
    implementation 'io.github.inflationx:calligraphy3:3.1.1'
    implementation 'io.github.inflationx:viewpump:2.0.3'
    // https://github.com/mikepenz/MaterialDrawer
    implementation('com.mikepenz:materialdrawer:6.0.9@aar') {
        transitive = true
    }
    // https://github.com/Philio/PreferenceCompatExtended
    implementation 'me.philio:preferencecompatextended:1.2.2'

    // After Effect animations
    implementation 'com.airbnb.android:lottie:2.6.0'
    implementation 'com.github.mmin18:realtimeblurview:1.2.1'
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    dataBinding.enabled true

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE']=code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            minSdkVersion rootProject.minSdkVersion
            targetSdkVersion rootProject.targetSdkVersion

            renderscriptTargetApi rootProject.minSdkVersion
            renderscriptSupportModeEnabled true

            versionCode code
            versionName "3.10.1"
            setProperty("archivesBaseName", "pia-$versionName-$versionCode")
            vectorDrawables {
                useSupportLibrary = true
            }
            testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        }
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'build/ovpnassets']
            jniLibs.srcDirs = ['ovpnlibs/jniLibs']

            jni.srcDirs = [] //disable automatic ndk-build
            res.srcDirs = ['src/main/res', 'src/playstore/res/']
        }
        test {
            java {
                srcDir 'test'
            }
        }
    }

    lintOptions {
        disable 'InvalidPackage', 'MissingTranslation', 'MissingDefaultResource'
    }

    flavorDimensions "pia", "store"

    productFlavors {
        production {
            // This field is not use in production, just just to a safe value
            buildConfigField 'String', 'STAGEINGHOST', '"https://www.privateinternetaccess.com/"'
            dimension "pia"
        }

        qa {
            buildConfigField 'String','STAGEINGHOST','"https://staging-1-77b8e3a311bcb6ec5e96.privateinternetaccess.com/"'
            dimension "pia"
        }

        playstore {
            dimension "store"
        }

        noinapp {
            dimension "store"
        }

        samsungstore {
            dimension "store"
        }

        amazonstore {
            dimension "store"
        }
    }

    testOptions { //Used for testing as TextUtils isn't available when testing.
        unitTests.returnDefaultValues = true
    }

    signingConfigs {
            release {
            if (System.env['KEYSTORE_PASSWORD'] == null ) {
                storePassword "citest"
                keyPassword "citest"
                keyAlias "key0"
                storeFile file("cikeystore")
            } else {
                keyAlias "piaandroid"
                storeFile file("pia.keystore")
                storePassword System.env['KEYSTORE_PASSWORD']
                keyPassword System.env['KEYSTORE_PASSWORD']
            }
            v2SigningEnabled true
        }
        debug {
        }
    }

    externalNativeBuild {
        cmake {
            path 'tools/CMakeLists.txt'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def newName = output.outputFile.name
                    if (newName.contains("debug"))
                       // Don't rename debug apks
                       newName = newName
                    else if (signingConfig.keyAlias != "piaandroid")
                        newName = newName.replace(".apk", "-unsigned.apk")
                    else
                        newName = newName.replace(".apk", "-signed.apk")
                    output.outputFileName =  newName
                }
            }
        }
        debug {

            debuggable true
        }
    }
    ndkVersion '21.0.6113669'
}

task fetchRegions {
    println "Fetching initial list of regions"
    def response = new URL("https://serverlist.piaservers.net/vpninfo/servers/v5").getText()
    new File("app/src/main/assets/regions.json").write response
}
preBuild.dependsOn fetchRegions

// Ensure native build is run before assets, so assets are ready to be merged into the apk
android.applicationVariants.all { variant ->
    variant.mergeAssets.dependsOn(variant.externalNativeBuildTasks)
}
